# Generated by Django 2.1.5 on 2019-01-12 14:02

import demobaza.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=255, unique=True)),
                ('photo', models.ImageField(blank=True, upload_to='avatars')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='создан')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='название')),
                ('slug', models.SlugField(editable=False, unique=True)),
            ],
            options={
                'verbose_name': 'город',
                'verbose_name_plural': 'города',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='название')),
                ('slug', models.SlugField(editable=False, unique=True)),
                ('short_text', models.TextField(blank=True, verbose_name='короткий текст')),
                ('long_text', models.TextField(blank=True, verbose_name='длинный текст')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='events', to='demobaza.City', verbose_name='город')),
            ],
            options={
                'verbose_name': 'событие (фестиваль, концерт, квартирник)',
                'verbose_name_plural': 'события (фестивали, концерты, квартирники)',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='создан')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='название')),
                ('slug', models.SlugField(editable=False, unique=True)),
            ],
            options={
                'verbose_name': 'жанр',
                'verbose_name_plural': 'жанры',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='создан')),
                ('sort_ordering', models.SmallIntegerField(verbose_name='порядок сортировки')),
                ('title', models.CharField(max_length=100, unique=True, verbose_name='название')),
                ('youtube_url', models.URLField(verbose_name='адрес ролика на YouTube')),
                ('youtube_id', models.CharField(editable=False, max_length=40)),
            ],
            options={
                'verbose_name': 'видео',
                'verbose_name_plural': 'видео',
                'ordering': ('sort_ordering', 'title'),
            },
        ),
        migrations.CreateModel(
            name='Musician',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='добавлен')),
            ],
            options={
                'verbose_name': 'музыкант',
                'verbose_name_plural': 'музыканты',
            },
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='добавлен')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='demobaza.Event', verbose_name='событие')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'организатор',
                'verbose_name_plural': 'организаторы',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='создан')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='название')),
                ('slug', models.SlugField(editable=False, unique=True)),
                ('short_text', models.TextField(blank=True, verbose_name='короткий текст')),
                ('long_text', models.TextField(blank=True, verbose_name='длинный текст')),
                ('is_active', models.BooleanField(default=True, verbose_name='активен')),
                ('verified', models.BooleanField(default=False, verbose_name='проверен администрацией')),
                ('verified_at', models.DateTimeField(editable=False, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projects', to='demobaza.City', verbose_name='город')),
                ('genres', models.ManyToManyField(blank=True, related_name='projects', to='demobaza.Genre', verbose_name='жанры')),
            ],
            options={
                'verbose_name': 'проект (группа, исполнитель)',
                'verbose_name_plural': 'проекты (группы, исполнители)',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='создан')),
                ('sort_ordering', models.SmallIntegerField(default=1, verbose_name='порядок сортировки')),
                ('title', models.CharField(blank=True, max_length=100, unique=True, verbose_name='название')),
                ('duration_sec', models.PositiveIntegerField(default=0, editable=False, verbose_name='длина, сек.')),
                ('file', models.FileField(upload_to='tracks', validators=[demobaza.validators.validate_mp3ext], verbose_name='.mp3')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='demobaza.Project')),
            ],
            options={
                'verbose_name': 'трек',
                'verbose_name_plural': 'треки',
                'ordering': ('sort_ordering', 'title'),
            },
        ),
        migrations.AddField(
            model_name='musician',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='demobaza.Project', verbose_name='проект'),
        ),
        migrations.AddField(
            model_name='musician',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='movie',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='demobaza.Project'),
        ),
        migrations.AddField(
            model_name='user',
            name='events',
            field=models.ManyToManyField(blank=True, related_name='users', through='demobaza.Organizer', to='demobaza.Event', verbose_name='события'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='projects',
            field=models.ManyToManyField(blank=True, related_name='users', through='demobaza.Musician', to='demobaza.Project', verbose_name='проекты'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='organizer',
            unique_together={('user', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='musician',
            unique_together={('user', 'project')},
        ),
    ]
